import { createElement } from 'lwc';
import HelloExpressions from 'c/helloExpressions';

const PREFIX = 'Uppercased Full Name:';


describe('c-hello-expressions', () => {
    afterEach(() => {
        // The jsdom instance is shared across test cases in a single file so reset the DOM
        while (document.body.firstChild) {
            document.body.removeChild(document.body.firstChild);
        }
    });

    async function flushPromises() {
        return Promise.resolve();
    }

    function setInputElementValue(element,firstName,lastName){

        element.shadowRoot
            .querySelectorAll('lightning-input')
            .forEach(input => {
                if(firstName && input.name === 'firstName'){
                    input.value = firstName;
                    input.dispatchEvent(new CustomEvent('change'));
                } else if(lastName && input.name === 'lastName'){
                    input.value = lastName;
                    input.dispatchEvent(new CustomEvent('change'));
                }
            });
    }

    it('TODO: test case generated by CLI command, please fill in test logic', async () => {
        // Arrange
        const element = createElement('c-hello-expressions', {
            is: HelloExpressions
        });

        // Act
        document.body.appendChild(element);

        setInputElementValue(element,'firstName','lastName')

        await flushPromises();



        // Assert
        const detailEl = element.shadowRoot.querySelector('p');
        expect(detailEl.textContent).toBe(`${PREFIX} FIRSTNAME LASTNAME`);
    });

    
    it('TODO: test case generated by CLI command, please fill in test logicm2', async () => {
        // Arrange
        const element = createElement('c-hello-expressions', {
            is: HelloExpressions
        });

        // Act
        document.body.appendChild(element);

        setInputElementValue(element,'firstName',undefined)

        await flushPromises();



        // Assert
        const detailEl = element.shadowRoot.querySelector('p');
        expect(detailEl.textContent).toBe(`${PREFIX} FIRSTNAME`);
    });

    
    it('TODO: test case generated by CLI command, please fill in test logic 3', async () => {
        // Arrange
        const element = createElement('c-hello-expressions', {
            is: HelloExpressions
        });

        // Act
        document.body.appendChild(element);

        setInputElementValue(element,undefined,'lastName')

        await flushPromises();



        // Assert
        const detailEl = element.shadowRoot.querySelector('p');
        expect(detailEl.textContent).toBe(`${PREFIX} LASTNAME`);
    });
});